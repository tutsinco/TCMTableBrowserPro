<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TCMTableBrowserUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationPlatform.Environment;
using Microsoft.Dynamics.AX.Metadata.MetaModel;
using Microsoft.Dynamics.AX.Metadata.Service;
using Microsoft.Dynamics.AX.Metadata.Providers;
using Microsoft.Dynamics.AX.Metadata.Storage;
using Microsoft.Dynamics.AX.Metadata.Storage.Runtime;
using Microsoft.Dynamics.@Client.ServerForm.Contexts;

using Microsoft.Dynamics.ApplicationPlatform.XppServices.Instrumentation;
using Microsoft.Dynamics.AX.Framework.Utilities;

/// <summary>
/// Table browser util class
/// </summary>
public static class TCMTableBrowserUtil
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateEntityUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates drill down url to given form.
    /// </summary>
    /// <param name = "_entityList">Entity to generate url to.</param>
    /// <returns>String representation of url to given form.</returns>
    public static str generateEntityUrl(TCMEntityList _entityList)
    {
        str url = '';
        
        SessionContext sessionContext = SessionContext::Get_Current();
        
        if (_entityList)
        {
            System.Uri host = sessionContext.Get_RequestUrl();            
           
            url = host.GetLeftPart(System.UriPartial::Path) + 'data/' + _entityList.PublicName;
        }
        
        return url;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTableBrowserUrl</Name>
				<Source><![CDATA[
	/// <summary>
    /// Generates url to tableBrowser.
	/// </summary>
	/// <param name = "_tableName">Table name</param>
	/// <returns>Url</returns>
    public static str generateTableBrowserUrl(TableName _tableName)
    {
        str url = '';
        
        SessionContext sessionContext = SessionContext::Get_Current();
        
        if (_tableName)
        {
            System.Uri host = sessionContext.Get_RequestUrl();

            MenuFunction menuFunction = new MenuFunction(menuItemDisplayStr(sysTableBrowser), MenuItemType::Display);			

            UrlHelper.UrlGenerator generator = new UrlHelper.UrlGenerator();
            generator.MenuItemName = menuFunction.name();
            generator.MenuItemType = menuFunction.type();
            generator.HostUrl = host.GetLeftPart(System.UriPartial::Path);
            generator.Company = curExt();
            generator.EncryptRequestQuery = true;             
            
            url = generator.GenerateFullUrl().AbsoluteUri + '&TableName=' + _tableName;
        }
        
        return url;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRunTimeMetadataProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get <c>IMetadataProvider</c>
    /// </summary>
    /// <returns><c>IMetadataProvider</c></returns>
    public static IMetadataProvider getRunTimeMetadataProvider()
    {
        var environment = EnvironmentFactory::GetApplicationEnvironment();

        var runtimeProviderConfiguration = new RuntimeProviderConfiguration(environment.get_Aos().get_PackageDirectory());

        var metadataProviderFactory = new MetadataProviderFactory();

        return metadataProviderFactory.CreateRuntimeProvider(runtimeProviderConfiguration);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>